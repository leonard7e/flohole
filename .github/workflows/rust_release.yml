name: Release

on:
    release:
        types:
            - published

jobs:
    build:
        name: Build and Upload Release Assets
        runs-on: ubuntu-latest
        strategy:
            matrix:
                platform: [x86_64-unknown-linux-gnu, x86_64-pc-windows-gnu]

        steps:
            # Checkout the repository
            - name: Checkout code
              uses: actions/checkout@v3

            # Install Rust toolchain
            - name: Set up Rust
              uses: actions-rs/toolchain@v1
              with:
                  toolchain: stable

            # Install additional target for Windows builds
            - name: Add Windows target
              if: matrix.platform == 'x86_64-pc-windows-gnu'
              run: rustup target add x86_64-pc-windows-gnu

            # Build the project
            - name: Build
              run: cargo build --release --target ${{ matrix.platform }}

            # Archive the binary
            - name: Archive binary
              run: |
                  mkdir dist
                  if [[ "${{ matrix.platform }}" == "x86_64-unknown-linux-gnu" ]]; then
                    cp target/${{ matrix.platform }}/release/flohole dist/flohole-linux-x86_64
                  else
                    cp target/${{ matrix.platform }}/release/flohole.exe dist/flohole-windows-x86_64.exe
                  fi

            # Upload artifact to the release
            - name: Upload Release Asset
              uses: actions/upload-release-asset@v1
              with:
                  upload_url: ${{ github.event.release.upload_url }}
                  asset_path: |
                      dist/flohole-linux-x86_64
                      dist/flohole-windows-x86_64.exe
                  asset_name: |
                      flohole-linux-x86_64
                      flohole-windows-x86_64.exe
                  asset_content_type: application/octet-stream
